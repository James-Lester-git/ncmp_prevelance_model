#### NCMP Prevelance Model      #### 
#### Adapting the OG Prevelance ####
#### model to the NCMP Data set ####


setwd("Z:/IA_NCMP/NCMP_prevelance_model/NCMP_model")

if (!require(tidyverse)) install.packages('tidyverse')
library(tidyverse)
if (!require(furrr)) install.packages('furrr')
library(furrr)
if (!require(sitar)) install.packages('sitar')
library(sitar)
if (!require(svDialogs)) install.packages('svDialogs')
library('svDialogs')

#################################
#################################
#### SECTION 1 - PARAMETERS #####
#################################
#################################

# PARAMETER TO CHANGE
#==============================================================
aorc <- 'adult' # ADULT OR CHILD MODEL

# set to 0 if there is no BMI targeting
bmi_targetting <- 0 # THE POPULATION ABOVE THIS BMI STATUS IS INCLUDED IN THE MODEL

# set to 100 if there is no numerical targeting (100% uptake)
# leave as 100 for all untargeted policies
num_targetting <- 100 # THE PERCENT OF PEOPLE IN THE TARGET POPULATION THAT IS IN THE POLICY/INTERVENTION

proportion_in_target <- num_targetting/100

# TARGET POPULATION CALCULATIONS
#==================================================================

if (aorc == 'adult'){
  if (bmi_targetting == 0){
    numbers_to_match <- sample(20176,20167 * proportion_in_target)
  }
  if (bmi_targetting == 1){
    numbers_to_match <- sample(19853,19853 * proportion_in_target)
  }
  if (bmi_targetting == 2){
    numbers_to_match <- sample(13245,13245 * proportion_in_target)
  }
  if (bmi_targetting == 3){
    numbers_to_match <- sample(5844,5844 * proportion_in_target)
  } 
  if (bmi_targetting == 4){
    numbers_to_match <- sample(666,666 * proportion_in_target)
  }
}     

if (aorc == 'child'){
  if (bmi_targetting == 0){
    numbers_to_match <- sample(7258,7258 * proportion_in_target)
  }
  if (bmi_targetting == 1){
    numbers_to_match <- sample(7141,7141 * proportion_in_target)
  }
  if (bmi_targetting == 2){
    numbers_to_match <- sample(2145,2145 * proportion_in_target)
  } 
  if (bmi_targetting == 3){
    numbers_to_match <- sample(1131,1131 * proportion_in_target)
  } 
  if (bmi_targetting == 4){
    numbers_to_match <- sample(280,280 * proportion_in_target)
  }
}

sample_size <- length(numbers_to_match) # THE SAMPLE SIZE OF THIS MODEL RUN

################################
################################
#### SECTION 2 - READ DATA #####
################################
################################

if (aorc == 'adult'){
  data <- read_rds("data/processed_hse_adults.rds") # READ ADULT DATA
}

if (aorc == 'child'){             
  data <- read_rds("data/processed_hse_children.rds") # READ CHILD DATA
}

###############################################
###############################################
#### SECTION 3 - HENRY EQUATION PARAMETERS ####
### HENRY 2005 - table 12 or SCAN table 19 ####
###############################################

# Activity multiplier
#=============================================================

activity <- function(age) {
  case_when( # Activity multipliers from SACN table 6 and 10
    age < 3 ~ 1.39,
    age < 10 ~ 1.57,
    age < 18 ~ 1.73,
    TRUE ~ 1.63
  )
}

# Weight multiplier
#=============================================================

weight_multiplier <- function(age, sex) {
  case_when(
    sex == 1 & age < 3 ~ 61,
    sex == 1 & age < 10 ~ 23.3,
    sex == 1 & age < 18 ~ 18.4,
    sex == 1 & age < 30 ~ 16.0,
    sex == 1 & age < 60 ~ 14.2,
    sex == 1            ~ 13.5,
    sex == 2 & age < 3 ~ 58.9,
    sex == 2 & age < 10 ~ 20.1,
    sex == 2 & age < 18 ~ 11.1,
    sex == 2 & age < 30 ~ 13.1,
    sex == 2 & age < 60 ~ 9.74,
    sex == 2            ~ 10.1,
    TRUE ~ NA_real_
  )
}

# plus a constant
#==========================================================

constant <- function(age, sex) {
  case_when(
    sex == 1 & age < 3 ~ -33.7,
    sex == 1 & age < 10 ~ 514,
    sex == 1 & age < 18 ~ 581,
    sex == 1 & age < 30 ~ 545,
    sex == 1 & age < 60 ~ 593,
    sex == 1            ~ 514,
    sex == 2 & age < 3 ~ -23.1,
    sex == 2 & age < 10 ~ 507,
    sex == 2 & age < 18 ~ 761,
    sex == 2 & age < 30 ~ 558,
    sex == 2 & age < 60 ~ 694,
    sex == 2            ~ 569,
    TRUE ~ NA_real_
  )
}

# Takes the child or adult data and adds the henry equation parameters as columns
#================================================================================

mutate_add_henry_parameters <- function(data) {
  data %>%
    mutate(activity = activity(age)) %>% # ADD ACTIVITY MULTIPLIER
    mutate(weight_multiplier = weight_multiplier(age, sex)) %>% # ADD WEIGHT MULTIPLIER
    mutate(constant = constant(age, sex)) # ADD CONSTANT
}

############################################################################
############################################################################
#### SECTION 4 - FUNCTIONS TO CALCULATE NEW OBESITY RATE AND BMI CHANGE ####
############################################################################
############################################################################

if (aorc == 'adult'){
  
  # FUNCTION TO CALCULATE BMI AND WEIGHT STATUS
  #--------------------------------------------------------
  obese_and_bmi <- function(data){
    data %>%
      mutate(bmi = weight / (height^2)) %>% # Definition of BMI - CALCULATE ORIGINAL BMI
      mutate(bmi_cat = case_when(bmi <= 18.5 ~ 1,
                                 bmi > 18.5 & bmi < 25 ~ 2,
                                 bmi >= 25 & bmi < 30 ~ 3,
                                 bmi >= 30 & bmi < 40 ~ 4,
                                 bmi >= 40 ~ 5)) # ADULT obesity definitions
  }
  
  #  FUNCTION TO CALCULATE THE NEW OBISITY RATE AFTER THE WEIGHT REDUCTION
  #--------------------------------------------------------------------
  obesity_rate <- function(data, weighting = T) {
    if (!weighting) {
      data <- mutate(data, wt = 1) # IF NO WEIGHTING, SET weighting to 1 for everyone.
    }
    
    data %>%
      mutate(new_bmi = new_weight / (height^2)) %>% # Definition of BMI - calculate new bmi
      mutate(bmi_change = bmi - new_bmi, # Change in bmi due to kcal reduction
             bmi_change = ifelse(bmi_change<0.0001,NA,bmi_change)) %>% # BMI_CHANGE IS NA IF THE INDIVIDUAL IS OUTSIDE TARGETTING
      mutate(weight_change = weight - new_weight, # CHANGE IN WEIGHT DUE TO KCAL CHANGE
             weight_change = ifelse(weight_change<0.0001,NA,weight_change)) %>% # WEIGHT_CHANGE IS NA IF THE INDIVIDUAL IS OUTSIDE TARGETTING 
      mutate(obese_and_very = (new_bmi >= 30)) %>% # ADULT obesity definition.
      mutate(underweight = (new_bmi <= 18.5)) %>% # ADULT underweight definition.
      mutate(healthy = (new_bmi > 18.5 & new_bmi < 25)) %>% # ADULT healthy weight definition.
      mutate(overweight = (new_bmi >= 25 & new_bmi < 30)) %>% # ADULT overweight definition.
      mutate(obese = (new_bmi >= 30 & new_bmi < 40)) %>% # ADULT obesity definition.
      mutate(very = (new_bmi >= 40)) %>% # ADULT very obesity definition.
      summarise(obesity_rate = weighted.mean(obese_and_very, wt), # obesity category to obesity rate
                underweight = weighted.mean(underweight, wt), # obesity category to obesity rate
                healthy_weight = weighted.mean(healthy, wt), # obesity category to obesity rate
                overweight = weighted.mean(overweight, wt), # obesity category to obesity rate
                obese = weighted.mean(obese, wt), # obesity category to obesity rate
                very_obese = weighted.mean(very, wt), # obesity category to obesity rate
                av_bmi_decrease_of_targeted = weighted.mean(bmi_change,wt,na.rm = TRUE), # average BMI change DUE TO KCAL REDUCTION
                av_weight_decrease_of_targeted = weighted.mean(weight_change,wt,na.rm = TRUE)) # AVERAGE WEIGHT CHANGE DUE TO KCAL REDUCTION
    
  }
}

if (aorc == 'child'){ 
  
  # FUNCTION TO CALCULATE BMI AND WEIGHT STATUS
  #--------------------------------------------------------
  obese_and_bmi <- function(data){
    data %>%
      mutate(bmi = weight / (height^2)) %>% # Definition of BMI - CALCULATE ORIGINAL BMI
      mutate(z = LMS2z(age, bmi, sex, "bmi", "uk90")) %>% # Calculating z-score for new BMI.
      mutate(percentile = pnorm(z)) %>% # z-score to percentile
      mutate(bmi_cat = case_when(percentile <= 0.02 ~ 1,
                                 percentile > 0.02 & percentile < 0.85 ~ 2,
                                 percentile >= 0.85 & percentile < 0.95 ~ 3,
                                 percentile >= 0.95 & percentile < 0.996 ~ 4,
                                 percentile >= 0.996 ~ 5)) %>% # Childhood obesity definitions.
      select(-z,-percentile) # CLEAR UP UNEEDED COLOUNS
  } 
  
  #  FUNCTION TO CALCULATE THE NEW OBISITY RATE AFTER THE WEIGHT REDUCTION
  #--------------------------------------------------------------------
  obesity_rate <- function(data, weighting = T) {
    if (!weighting) {
      data <- mutate(data, wt = 1) # IF NO WEIGHTING, SET weighting to 1 for everyone.
    }
    
    data %>%
      mutate(new_bmi = new_weight / (height^2)) %>% # Definition of BMI - calculate new bmi
      mutate(bmi_change = bmi - new_bmi, # Change in bmi due to kcal reduction
             bmi_change = ifelse(bmi_change<0.0001,NA,bmi_change)) %>% # BMI_CHANGE IS NA IF THE INDIVIDUAL IS OUTSIDE TARGETTING
      mutate(weight_change = weight - new_weight, # CHANGE IN WEIGHT DUE TO KCAL CHANGE
             weight_change = ifelse(weight_change<0.0001,NA,weight_change)) %>% # WEIGHT_CHANGE IS NA IF THE INDIVIDUAL IS OUTSIDE TARGETTING 
      mutate(z = LMS2z(age, new_bmi, sex, "bmi", "uk90")) %>% # Calculating z-score for new BMI.
      mutate(percentile = pnorm(z)) %>% # z-score to percentile
      mutate(obese_and_very = (percentile >= 0.95)) %>% # Childhood obesity definition.
      mutate(under = (percentile <= 0.02)) %>% # Childhood obesity definition.
      mutate(healthy = (percentile > 0.02 & percentile < 0.85)) %>% # Childhood obesity definition.
      mutate(over = (percentile >= 0.85 & percentile < 0.95)) %>% # Childhood obesity definition.
      mutate(obese = (percentile >= 0.95 & percentile < 0.996)) %>% # Childhood obesity definition.
      mutate(very = (percentile >= 0.996)) %>% # Childhood obesity definition.
      summarise(obesity_rate = weighted.mean(obese_and_very, wt,na.rm = TRUE), # obesity category to obesity rate
                uderweight = weighted.mean(under, wt,na.rm = TRUE), # obesity category to obesity rate
                healthy_weight = weighted.mean(healthy, wt,na.rm = TRUE), # obesity category to obesity rate
                overweight = weighted.mean(over, wt,na.rm = TRUE), # obesity category to obesity rate
                obese = weighted.mean(obese, wt,na.rm = TRUE), # obesity category to obesity rate
                very_obese = weighted.mean(very, wt,na.rm = TRUE), # obesity category to obesity ratebmi_decrease = weighted.mean(bmi_change,wt,na.rm = TRUE), # average BMI change DUE TO KCAL REDUCTION
                av_bmi_decrease_of_targeted = weighted.mean(bmi_change,wt,na.rm = TRUE), # average BMI change DUE TO KCAL REDUCTION
                av_weight_decrease_of_targeted = weighted.mean(weight_change,wt,na.rm = TRUE)) # AVERAGE WEIGHT CHANGE DUE TO KCAL REDUCTION
  }  
}

# FUNRTION TO ADD A NUMERIC COUNTER TO INDIVIDUALS IN THE TARGET BMI CATs
#---------------------------------------------------------------------------
add_num <- function(data) {
  data %>% left_join(data %>% 
                       filter(bmi_cat>bmi_targetting) %>% 
                       mutate(num = row_number()),
                     by = c("age", "sex", "weight", "height", "wt", "bmi", "bmi_cat"))
}

#######################################################
#######################################################
#### SECTION 5 - FUNCTION TO APPLY HENRY EQUATIONS ####
#######################################################
#######################################################

apply_kcal_reduction <- function(data, kcal_reduction) {
  data %>%
    mutate_add_henry_parameters() %>% # add henry equation parameters
    mutate(kcal = activity * (weight_multiplier * weight + constant)) %>% # Find their current diet
    mutate(kcal = if_else(bmi_cat > bmi_targetting & # ADJUST DIET OF TARGETED BMI CATEGORY ONLY
                            num %in% numbers_to_match, # ADJUST DIET OF TARGETED POPULATION ONLY
                          kcal - kcal_reduction, # ADJUST DIET
                          kcal)) %>% 
    mutate(new_weight = kcal / (activity * weight_multiplier) - constant / weight_multiplier) %>% # Find new weight
    mutate(new_weight = if_else(new_weight < 0, 1, new_weight)) %>% # If their weight has gone negative, push it back positive so we still have an obesity rate rather than NaN.
    select(-kcal) # Column no longer needed.
}

###########################################################################
###########################################################################
#### SECTIO 7 - FUNCTION TO APPLY CHANGE AND CALCULATE NEW OBESITY RATE ###
###########################################################################
###########################################################################

new_obesity_rate <- function(kcal, weighted=T) {
  data %>%
    obese_and_bmi %>% # CALCULATE THE OBESITY CATS AND CURRENT BMIs
    add_num %>% # NUMBER THE TARGETTED BMI CATS
    apply_kcal_reduction(kcal) %>% # apply henry equations with kcal reduction to calculate new weight
    obesity_rate(weighted) %>% # calculate new obesity rate
    mutate(kcal = kcal)
}

#################################################################
#################################################################
#### SECTION 6 - USE FUNCTIONS TO CALCULATE AND WRITE OUTPUT ####
#################################################################
#################################################################

plan(multisession(workers = 4))

inputs <- c(seq(0,500, by = 1)) # kcal reductions to apply

inputs <- c(inputs, -inputs) %>% # add calorie decreases as well as increases
  unique()

future_map_dfr(inputs, new_obesity_rate, .progress = T) %>%
  write_csv(paste0('outputs/',aorc,'_targetted at ',num_targetting,'% of people in BMI category .gt. ',bmi_targetting,'_giving a sample size of ',sample_size,'.csv'))

if(sample_size<=100){
  dlg_message('CAUTION SMALL SAMPLE SIZE!!!','yesno')$res 
}